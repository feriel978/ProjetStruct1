on:
  push:
    branches:
      - main 
jobs:
  sfdx-scanner-analysis:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout the repository
      uses: actions/checkout@v2

    # Step 2: Set up Node.js with a compatible version
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.18.0'  # Ensure this is a compatible version

    # Step 3: Install Salesforce CLI (SFDX)
    - name: Install Salesforce CLI
      run: |
        wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
        mkdir ~/sfdx
        tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
        echo "$HOME/sfdx/bin" >> $GITHUB_PATH
        ~/sfdx/bin/sfdx version

    # Step 4: Install Salesforce Scanner plugin (SFDX Scanner)
    - name: Install SFDX Scanner
      run: sfdx plugins:install @salesforce/sfdx-scanner

    # Step 5: Authenticate to Salesforce Org (using SFDX URL from secrets)
    - name: Authenticate to target Salesforce Org
      run: |
        echo ${{ secrets.SFDX_URL_CI_SECRET }} > ./SFDX_URL_CI_SECRET.txt
        sfdx auth:sfdxurl:store -f ./SFDX_URL_CI_SECRET.txt -s -a targetOrg

    # Step 6: Run the Salesforce Scanner on the code (Apex, LWC, etc.)
    - name: Run Salesforce Scanner
      run: |
        sfdx scanner:run --format sarif --target 'force-app/**/*.cls' \
          --category 'Security,Code Style,Performance,Best Practices,Design' \
          --outfile 'apexScanResults.sarif'

    # Step 7: Upload SARIF file as an artifact
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: apexScanResults.sarif

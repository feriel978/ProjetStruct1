# Unique name for this workflow
name: validate-deployment-test


# Definition when the workflow should run
on:
    push:
      branches:
        - "main"
    
 jobs:
  sfdx-scanner-analysis:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout the repository
      uses: actions/checkout@v2

    # Step 2: Install Node.js using nvm (Ensure using a compatible version)
    - name: Install Node.js
      run: |
        # Install Node Version Manager (nvm)
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
        source ~/.nvm/nvm.sh
        # Install and use Node.js version 18.18.0
        nvm install 18.18.0
        nvm use 18.18.0
        # Verify the installed Node.js version
        node -v
        npm -v

    # Step 3: Install Salesforce CLI (SFDX)
    - name: Install Salesforce CLI
      run: |
        wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
        mkdir ~/sfdx
        tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
        echo "$HOME/sfdx/bin" >> $GITHUB_PATH
        ~/sfdx/bin/sfdx version

    # Step 4: Install SFDX Scanner plugin
    - name: Install SFDX Scanner
      run: |
        # Clean npm/yarn cache to avoid potential conflicts
        npm cache clean --force
        yarn cache clean
        # Install the plugin
        sfdx plugins:install @salesforce/sfdx-scanner

    # Step 5: Authenticate to Salesforce Org (using SFDX URL from secrets)
    - name: Authenticate to target Salesforce Org
      run: |
        echo ${{ secrets.SFDX_URL_CI_SECRET }} > ./SFDX_URL_CI_SECRET.txt
        sfdx auth:sfdxurl:store -f ./SFDX_URL_CI_SECRET.txt -s -a targetOrg

    # Step 6: Run Salesforce Scanner
    - name: Run Salesforce Scanner
      run: |
        sfdx scanner:run --format sarif --target 'force-app/**/*.cls' \
          --category 'Security,Code Style,Performance,Best Practices,Design' \
          --outfile 'apexScanResults.sarif'

    # Step 7: Upload SARIF file as an artifact
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: apexScanResults.sarif
